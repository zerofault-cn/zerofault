php 的正则表达式字符匹配 2006-04-21 21:42:01 

字符/ 
意义：对于字符，通常表示按字面意义，指出接着的字符为特殊字符，不作解释。 
例如：/b/匹配字符’b’,通过在b 前面加一个反斜杠，也就是/b/，则该字符变成特殊字符，表示 
匹配一个单词的分界线。 
或者： 
对于几个字符，通常说明是特殊的，指出紧接着的字符不是特殊的，而应该按字面解释。 
例如：*是一个特殊字符，匹配任意个字符(包括0个字符)；例如：/a*/意味匹配0个或多个a。为了匹配字 

面上的*，在a前面加一个反斜杠；例如：/a*/匹配’a*’。 

字符^ 
意义：表示匹配的字符必须在最前边。 
例如：/^A/不匹配"an A,"中的’A’，但匹配"An A."中最前面的’A’。 

字符$ 
意义：与^类似，匹配最末的字符。 
例如：/t$/不匹配"eater"中的’t’，但匹配"eat"中的’t’。 

字符* 
意义：匹配*前面的字符0次或n次。 
例如:/bo*/匹配"A ghost booooed"中的’boooo’或"A bird warbled"中的’b’，但不匹配"Agoat g 
runted"中的任何字符。 

字符+ 
意义：匹配+号前面的字符1次或n次。等价于{ 1, }。 
例如：/a+/匹配"candy"中的’a’和"caaaaaaandy."中的所有’a’。 

字符? 
意义：匹配?前面的字符0次或1次。 
例如：/e?le?/匹配"angel"中的’el’和"angle."中的’le’。 

字符. 
意义：(小数点)匹配除换行符外的所有单个的字符。 
例如：/.n/匹配"nay, an apple is on the tree"中的’an’和’on’，但不匹配’nay’。 


字符(x) 
意义：匹配’x’并记录匹配的值。 
例如：/(foo)/匹配和记录"foo bar."中的’foo’。匹配子串能被结果数组中的素[1], ...,[n] 返 
回，或被RegExp对象的属性, ..., 返回。 

字符x│y 
意义：匹配’x’或者’y’。 
例如：/green│red/匹配"green apple"中的’green’和"red apple."中的’red’。 

字符{ n } 
意义：这里的n是一个正整数。匹配前面的n个字符。 
例如：/a{ 2 }/不匹配"candy,"中的’a’，但匹配"caandy," 中的所有’a’和"caaandy."中前面的两个 

’a’。 

字符{ n, } 
意义：这里的n是一个正整数。匹配至少n个前面的字符。 
例如：/a{ 2, }不匹配"candy"中的’a’，但匹配"caandy"中的所有’a’和"caaaaaaandy."中的所有’a 

’ 

字符{ n,m } 
意义：这里的n和m都是正整数。匹配至少n个最多m个前面的字符。 
例如：/a{ 1,3 }/不匹配"cndy"中的任何字符，但匹配 "candy,"中的’a’，"caandy," 中的前面两个 
’a’和"caaaaaaandy"中前面的三个’a’，注意：即使"caaaaaaandy" 中有很多个’a’，但只匹配前面 

的三 个’a’即"aaa"。 

字符[xyz] 
意义：一字符列表，匹配列出中的任一字符。你可以通过连字符-指出一个字符范围。 
例如：[abcd]跟[a-c]一样。它们匹配"brisket"中的’b’和"ache"中的’c’。 

字符[^xyz] 
意义：一字符补集，也就是说，它匹配除了列出的字符外的所有东西。 你可以使用连字符-指出一 字符 

范围。 
例如：[^abc]和[^a-c]等价，它们最早匹配"brisket"中的’r’和"chop."中的’h’。 

字符 
意义：匹配一个空格(不要与b混淆) 

字符b 
意义：匹配一个单词的分界线，比如一个空格(不要与混淆) 
例如：/bnw/匹配"noonday"中的’no’，/wyb/匹配"possibly yesterday."中的’ly’。 

字符B 
意义：匹配一个单词的非分界线 
例如：/wBn/匹配"noonday"中的’on’，/yBw/匹配"possibly yesterday."中的’ye’。 

字符cX 
意义：这里的X是一个控制字符。匹配一个字符串的控制字符。 
例如：/cM/匹配一个字符串中的control-M。 

字符d 
意义：匹配一个数字，等价于[0-9]。 
例如：/d/或/[0-9]/匹配"B2 is the suite number."中的’2’。 

字符D 
意义：匹配任何的非数字，等价于[^0-9]。 
例如：/D/或/[^0-9]/匹配"B2 is the suite number."中的’B’。 

字符f 
意义：匹配一个表单符 

字符n 
意义：匹配一个换行符 

字符r 
意义：匹配一个回车符 

字符s 
意义：匹配一个单个white空格符，包括空格，tab，form feed，换行符，等价于[ fnrtv]。 
例如：/sw*/匹配"foo bar."中的’ bar’。 

字符S 
意义：匹配除white空格符以外的一个单个的字符，等价于[^ fnrtv]。 
例如：/S/w*匹配"foo bar."中的’foo’。 

字符t 
意义：匹配一个制表符 

字符v 
意义：匹配一个顶头制表符 

字符w 
意义：匹配所有的数字和字母以及下划线，等价于[A-Za-z0-9_]。 
例如：/w/匹配"apple,"中的’a’，".28,"中的’5’和"3D."中的’3’。 

字符W 
意义：匹配除数字、字母外及下划线外的其它字符，等价于[^A-Za-z0-9_]。 
例如：/W/或者/[^$A-Za-z0-9_]/匹配"50%."中的’%’。 

字符n 
意义：这里的n是一个正整数。匹配一个正则表达式的最后一个子串的n的值(计数左圆括号)。 

例如：/apple(,)sorange1/匹配"apple, orange, cherry, peach."中的’apple, orange’，下面有一个 

更加完整的例子。 
注意：如果左圆括号中的数字比n指定的数字还小，则n取下一行的八进制escape作为描述。 

字符ooctal和xhex 
意义：这里的ooctal是一个八进制的escape值，而xhex是一个十六进制的escape值，允许在一个正则表达 

式中嵌入ASCII码 

附:下表是元字符及其在正则表达式上下文中的行为的一个完整列表： 

字符 描述 
\ 将下一个字符标记为一个特殊字符、或一个原义字符、或一个 后向引用、或一个八进制转义符。例如 

，'n' 匹配字符 "n"。'\n' 匹配一个换行符。序列 '' 匹配 "\" 而 "\(" 则匹配 "("。 
^ 匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\n' 或 '\r' 

之后的位置。 
$ 匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\n' 或 '\r' 之 

前的位置。 
* 匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。 * 等价于{0,}。 
+ 匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 

{1,}。 
? 匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 或 "does" 中的"do" 。? 等价于 

{0,1}。 
{n} n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 

"food" 中的两个 o。 
{n,} n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 

"foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。 
{n,m} m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。刘， "o{1,3}" 将匹配 

"fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。 
? 当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。 

非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如 

，对于字符串 "oooo"，'o+?' 将匹配单个 "o"，而 'o+' 将匹配所有 'o'。 
. 匹配除 "\n" 之外的任何单个字符。要匹配包括 '\n' 在内的任何字符，请使用象 '[.\n]' 的模式。 
(pattern) 匹配pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 

中使用 SubMatches 集合，在JScript 中则使用 {CONTENT}… 属性。要匹配圆括号字符，请使用 '\(' 

或 '\)'。 
(?:pattern) 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用 

。这在使用 "或" 字符 (│) 来组合一个模式的各个部分是很有用。例如， 'industr(?:y│ies) 就是一 

个比 'industry│industries' 更简略的表达式。 
(?=pattern) 正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配， 

也就是说，该匹配不需要获取供以后使用。例如， 'Windows (?=95│98│NT│2000)' 能匹配 "Windows 

2000" 中的 "Windows" ，但不能匹配 "Windows 3.1" 中的 "Windows"。预查不消耗字符，也就是说，在 

一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。 
(?!pattern) 负向预查，在任何不匹配Negative lookahead matches the search string at any point 

where a string not matching pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是 

说，该匹配不需要获取供以后使用。例如'Windows (?!95│98│NT│2000)' 能匹配 "Windows 3.1" 中的 

"Windows"，但不能匹配 "Windows 2000" 中的 "Windows"。预查不消耗字符，也就是说，在一个匹配发 

生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始 
x│y 匹配 x 或 y。例如，'z│food' 能匹配 "z" 或 "food"。'(z│f)ood' 则匹配 "zood" 或 "food" 

。 
[xyz] 字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 "plain" 中的 'a'。 
[^xyz] 负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 "plain" 中的'p'。 
[a-z] 字符范围。匹配指定范围内的任意字符。例如，'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写 

字母字符。 
[^a-z] 负值字符范围。匹配任何不在指定范围内的任意字符。例如，'[^a-z]' 可以匹配任何不在 'a' 

到 'z' 范围内的任意字符。 
\b 匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\b' 可以匹配"never" 中的 'er'，但 

不能匹配 "verb" 中的 'er'。 
\B 匹配非单词边界。'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'。 
\cx 匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。 x 的值必须为 A-Z 或 a-z 

之一。否则，将 c 视为一个原义的 'c' 字符。 
\d 匹配一个数字字符。等价于 [0-9]。 
\D 匹配一个非数字字符。等价于 [^0-9]。 
\f 匹配一个换页符。等价于 \x0c 和 \cL。 
\n 匹配一个换行符。等价于 \x0a 和 \cJ。 
\r 匹配一个回车符。等价于 \x0d 和 \cM。 
\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。 
\S 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。 
\t 匹配一个制表符。等价于 \x09 和 \cI。 
\v 匹配一个垂直制表符。等价于 \x0b 和 \cK。 
\w 匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。 
\W 匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。 
\xn 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如， '\x41' 匹 

配 "A"。'\x041' 则等价于 '\x04' & "1"。正则表达式中可以使用 ASCII 编码。. 
\num 匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，'(.)' 匹配两个连续的相同字 

符。 
\n 标识一个八进制转义值或一个后向引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为后向引用 

。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。 
\nm 标识一个八进制转义值或一个后向引用。如果 \nm 之前至少有is preceded by at least nm 个获取 

得子表达式，则 nm 为后向引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的后向引用 

。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。 
\nml 如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。 
\un 匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。  
 
